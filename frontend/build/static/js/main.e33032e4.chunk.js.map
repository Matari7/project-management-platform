{"version":3,"sources":["components/Login.js","components/FileUpload.js","components/OrderService.js","components/ProductService.js","components/Chat.js","components/CreateUser.js","components/DeleteUser.js","components/UpdateUser.js","components/ReadUser.js","components/UserRoleService.js","components/CreateCommentary.js","components/DeleteCommentary.js","components/UpdateCommentary.js","components/ReadCommentaries.js","components/CreateDocument.js","components/DeleteDocument.js","components/UpdateDocument.js","components/CreateProject.js","components/DeleteProject.js","components/UpdateProject.js","components/ReadProject.js","components/ProjectSubscriptionService.js","components/ReadTask.js","components/CreateTask.js","app.js","index.js","apolloClient.js"],"names":["Login","username","setUsername","useState","password","setPassword","message","setMessage","_jsxs","children","_jsx","onSubmit","async","e","preventDefault","response","fetch","concat","process","method","headers","body","JSON","stringify","ok","responseData","json","console","log","errorData","error","type","value","onChange","target","required","FileUpload","file","setFile","files","onClick","formData","FormData","append","axios","post","err","OrderService","orderName","setOrderName","totalAmount","setTotalAmount","orders","setOrders","fetchOrders","get","data","parseFloat","map","order","id","ProductService","productName","setProductName","price","setPrice","products","setProducts","fetchProducts","product","Chat","messages","setMessages","ws","setWs","useEffect","socket","WebSocket","split","join","onmessage","event","prevMessages","msg","index","sendMessage","send","CreateUser","email","setEmail","placeholder","DeleteUser","userId","setUserId","UpdateUser","ReadUser","users","setUsers","fetchUsers","user","UserRoleService","selectedUserId","setSelectedUserId","selectedRole","setSelectedRole","role","setRole","length","fetchRoles","status","r","CreateCommentary","content","setContent","projectId","setProjectId","commentary","DeleteCommentary","commentaryId","setCommentaryId","delete","_error$response","_error$response$data","UpdateCommentary","put","ReadCommentaries","commentaries","setCommentaries","comment","user_id","createdAt","updatedAt","CreateDocument","title","setTitle","document","DeleteDocument","documentId","setDocumentId","handleDelete","UpdateDocument","CreateProject","name","setName","description","setDescription","project","DeleteProject","UpdateProject","GET_PROJECTS","gql","_templateObject","_taggedTemplateLiteral","ReadProject","loading","useQuery","getProjects","ProjectSubscriptionService","subscriptions","setSubscriptions","fetchSubscriptions","result","project_id","sub","Date","created_at","toLocaleString","ReadTask","tasks","setTasks","fetchTasks","task","CreateTask","App","Router","className","Link","to","Routes","Route","path","element","ReactDOM","render","ApolloProvider","client","getElementById","ApolloClient","InMemoryCache","HttpLink","require","link","uri","cache","module","exports"],"mappings":"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","file":"static/js/main.e33032e4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [message, setMessage] = useState('');\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}:5000/api/auth/login`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ username, password }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const responseData = await response.json();\r\n                console.log('Login successful:', responseData);\r\n                setMessage('Login successful!');\r\n            } else {\r\n                const errorData = await response.json();\r\n                setMessage(`Failed to login: ${errorData.message}`);\r\n            }\r\n        } catch (error) {\r\n            setMessage(`Error logging in: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Login</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label>Username:</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={username}\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                        required\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Password:</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        required\r\n                    />\r\n                </div>\r\n                <button type=\"submit\">Login</button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Component to handle file upload.\r\n */\r\nconst FileUpload = () => {\r\n    // State to store the selected file\r\n    const [file, setFile] = useState(null);\r\n    // State to store and display messages to the user\r\n    const [message, setMessage] = useState('');\r\n\r\n    /**\r\n     * Handles file input change event.\r\n     * Updates the file state with the selected file.\r\n     * \r\n     * @param {Event} e - The file input change event\r\n     */\r\n    const onFileChange = (e) => {\r\n        setFile(e.target.files[0]);\r\n    };\r\n\r\n    /**\r\n     * Handles file upload process.\r\n     * Sends a POST request to the server to upload the selected file.\r\n     */\r\n    const onFileUpload = async () => {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n\r\n        try {\r\n            // Sends a POST request to the API to upload the file\r\n            await axios.post(`${process.env.REACT_APP_API_URL}:4028/api/files/upload`, formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            });\r\n            // Updates the message state with a success message\r\n            setMessage('File uploaded successfully');\r\n        } catch (err) {\r\n            // Logs the error and updates the message state with an error message\r\n            console.error(err);\r\n            setMessage('File upload failed');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>File Upload</h2>\r\n            {/* Input to select a file */}\r\n            <input type=\"file\" onChange={onFileChange} />\r\n            {/* Button to trigger file upload */}\r\n            <button onClick={onFileUpload}>Upload</button>\r\n            {/* Display message if there is any */}\r\n            <p>{message}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FileUpload;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Component to manage orders by creating and retrieving them.\r\n */\r\nconst OrderService = () => {\r\n    // State to store the order name and total amount\r\n    const [orderName, setOrderName] = useState('');\r\n    const [totalAmount, setTotalAmount] = useState('');\r\n    // State to store the list of orders\r\n    const [orders, setOrders] = useState([]);\r\n    // State to store and display messages to the user\r\n    const [message, setMessage] = useState('');\r\n\r\n    /**\r\n     * Handles the creation of a new order.\r\n     * Sends a POST request to the server with order details and fetches the updated list of orders.\r\n     */\r\n    const handleCreateOrder = async () => {\r\n        try {\r\n            // Sends a POST request to create a new order\r\n            await axios.post(`${process.env.REACT_APP_API_URL}:4027/api/orders`, {\r\n                orderName,\r\n                totalAmount: parseFloat(totalAmount)\r\n            });\r\n            setMessage('Order created successfully!');\r\n            fetchOrders(); // Fetch the updated list of orders\r\n        } catch (error) {\r\n            // Updates the message state with an error message\r\n            setMessage(`Error creating order: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Fetches the list of orders from the server.\r\n     * Sends a GET request and updates the orders state with the response data.\r\n     */\r\n    const fetchOrders = async () => {\r\n        try {\r\n            // Sends a GET request to fetch the list of orders\r\n            const response = await axios.get(`${process.env.REACT_APP_API_URL}:4027/api/orders`);\r\n            setOrders(response.data);\r\n        } catch (error) {\r\n            // Updates the message state with an error message\r\n            setMessage(`Error fetching orders: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Order Service</h2>\r\n            {/* Input for order name */}\r\n            <div>\r\n                <label>Order Name:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={orderName}\r\n                    onChange={(e) => setOrderName(e.target.value)}\r\n                />\r\n            </div>\r\n            {/* Input for total amount */}\r\n            <div>\r\n                <label>Total Amount:</label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={totalAmount}\r\n                    onChange={(e) => setTotalAmount(e.target.value)}\r\n                />\r\n            </div>\r\n            {/* Buttons to create an order and fetch orders */}\r\n            <button onClick={handleCreateOrder}>Create Order</button>\r\n            <button onClick={fetchOrders}>Fetch Orders</button>\r\n            {/* Display message if there is any */}\r\n            {message && <p>{message}</p>}\r\n            {/* List of orders */}\r\n            <ul>\r\n                {orders.map((order) => (\r\n                    <li key={order.id}>\r\n                        {order.orderName} - ${order.totalAmount}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrderService;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Component to manage products by creating and fetching them.\r\n */\r\nconst ProductService = () => {\r\n    // State to store the product name and price\r\n    const [productName, setProductName] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    // State to store the list of products\r\n    const [products, setProducts] = useState([]);\r\n    // State to store and display messages to the user\r\n    const [message, setMessage] = useState('');\r\n\r\n    /**\r\n     * Handles the creation of a new product.\r\n     * Sends a POST request to the server with product details and fetches the updated list of products.\r\n     */\r\n    const handleCreateProduct = async () => {\r\n        try {\r\n            // Sends a POST request to create a new product\r\n            await axios.post(`${process.env.REACT_APP_API_URL}:4026/api/products`, {\r\n                productName,\r\n                price: parseFloat(price)\r\n            });\r\n            setMessage('Product created successfully!');\r\n            fetchProducts(); // Fetch the updated list of products\r\n        } catch (error) {\r\n            // Updates the message state with an error message\r\n            setMessage(`Error creating product: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Fetches the list of products from the server.\r\n     * Sends a GET request and updates the products state with the response data.\r\n     */\r\n    const fetchProducts = async () => {\r\n        try {\r\n            // Sends a GET request to fetch the list of products\r\n            const response = await axios.get(`${process.env.REACT_APP_API_URL}:4026/api/products`);\r\n            setProducts(response.data);\r\n            setMessage('Products retrieved successfully');\r\n        } catch (error) {\r\n            // Updates the message state with an error message\r\n            setMessage(`Error fetching products: ${error.message}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Product Service</h2>\r\n            {/* Input for product name */}\r\n            <div>\r\n                <label>Product Name:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={productName}\r\n                    onChange={(e) => setProductName(e.target.value)}\r\n                />\r\n            </div>\r\n            {/* Input for product price */}\r\n            <div>\r\n                <label>Price:</label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={price}\r\n                    onChange={(e) => setPrice(e.target.value)}\r\n                />\r\n            </div>\r\n            {/* Buttons to create a product and fetch products */}\r\n            <button onClick={handleCreateProduct}>Create Product</button>\r\n            <button onClick={fetchProducts}>Fetch Products</button>\r\n            {/* Display message if there is any */}\r\n            {message && <p>{message}</p>}\r\n            {/* List of products */}\r\n            <ul>\r\n                {products.map((product) => (\r\n                    <li key={product.id}>\r\n                        {product.productName} - ${product.price}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductService;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst Chat = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n    const [ws, setWs] = useState(null);\r\n\r\n    // Initialize WebSocket connection when the component mounts\r\n    useEffect(() => {\r\n        const socket = new WebSocket(`ws://${process.env.REACT_APP_API_URL.split('http://').join('')}:8080/ws`);\r\n        \r\n        // Handle incoming messages from the WebSocket\r\n        socket.onmessage = (event) => {\r\n            setMessages((prevMessages) => [...prevMessages, event.data]);\r\n        };\r\n\r\n        // Set the WebSocket instance in state\r\n        setWs(socket);\r\n    }, []);\r\n\r\n    // Function to send a message through the WebSocket\r\n    const sendMessage = () => {\r\n        if (ws) {\r\n            ws.send(message); // Send the current message through the WebSocket\r\n            setMessage('');    // Clear the input field\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Chat</h2>\r\n            <div>\r\n                {messages.map((msg, index) => (\r\n                    <p key={index}>{msg}</p> // Display each message in the chat\r\n                ))}\r\n            </div>\r\n            <input\r\n                type=\"text\"\r\n                value={message}\r\n                onChange={(e) => setMessage(e.target.value)} // Update the message state as the user types\r\n            />\r\n            <button onClick={sendMessage}>Send</button>      \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import React, { useState } from 'react';\r\n\r\nfunction CreateUser() {\r\n  const [username, setUsername] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [message, setMessage] = useState('');\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Send a POST request to create a new user\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}:4001/api/users`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ username, email, password }) // Send the user data as JSON\r\n    });\r\n\r\n    if (response.ok) {\r\n      setMessage('User created successfully!'); // Display success message\r\n    } else {\r\n      const errorData = await response.json();\r\n      setMessage(`Failed to create user: ${errorData.message}`); // Display error message\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Create User</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Username\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Create</button>\r\n      </form>\r\n      {message && <p>{message}</p>} {/* Display message if there is any */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateUser;\r\n","import React, { useState } from 'react';\r\n\r\n/**\r\n * Component to handle the deletion of a user.\r\n */\r\nfunction DeleteUser() {\r\n  // State to store the user ID input by the user\r\n  const [userId, setUserId] = useState('');\r\n  // State to store and display messages to the user\r\n  const [message, setMessage] = useState('');\r\n\r\n  /**\r\n   * Handles the user deletion process.\r\n   * Sends a DELETE request to the server and updates the message state based on the response.\r\n   * \r\n   * @param {Event} e - The form submit event\r\n   */\r\n  const handleDelete = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Sends a DELETE request to the API with the user ID\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}:4002/api/users/${userId}`, {\r\n      method: 'DELETE'\r\n    });\r\n\r\n    if (response.ok) {\r\n      // Updates the message state with a success message\r\n      setMessage('User deleted successfully!');\r\n    } else {\r\n      // Parses the error response and updates the message state with an error message\r\n      const errorData = await response.json();\r\n      setMessage(`Failed to delete user: ${errorData.message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Delete User</h2>\r\n      {/* Form to input user ID and trigger the deletion */}\r\n      <form onSubmit={handleDelete}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"User ID\"\r\n          value={userId}\r\n          onChange={(e) => setUserId(e.target.value)}\r\n          required\r\n        />\r\n        <button type=\"submit\">Delete</button>\r\n      </form>\r\n      {/* Display message if there is any */}\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeleteUser;\r\n","import React, { useState } from 'react';\r\n\r\n/**\r\n * Component for updating user details.\r\n */\r\nfunction UpdateUser() {\r\n  // State to hold the user ID\r\n  const [userId, setUserId] = useState('');\r\n  // State to hold the new username\r\n  const [username, setUsername] = useState('');\r\n  // State to hold the new email\r\n  const [email, setEmail] = useState('');\r\n  // State to hold the new password\r\n  const [password, setPassword] = useState('');\r\n  // State to hold messages, including errors and success messages\r\n  const [message, setMessage] = useState('');\r\n\r\n  /**\r\n   * Handles the form submission for updating the user.\r\n   * @param {Event} e - The event object.\r\n   */\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      // Make an HTTP PUT request to update the user details\r\n      const response = await fetch(`${process.env.REACT_APP_API_URL}:4003/api/users/${userId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ username, email, password })\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Set the success message\r\n        setMessage('User updated successfully!');\r\n      } else {\r\n        // Parse the error message from the response\r\n        const errorData = await response.json();\r\n        setMessage(`Failed to update user: ${errorData.message}`);\r\n      }\r\n    } catch (error) {\r\n      // Set the error message if the fetch fails\r\n      setMessage(`Error: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Update User</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"User ID\"\r\n          value={userId}\r\n          onChange={(e) => setUserId(e.target.value)}\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Username\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Update</button>\r\n      </form>\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpdateUser;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Component to fetch and display a list of users from an API.\r\n */\r\nconst ReadUser = () => {\r\n    // State to hold the list of users and messages\r\n    const [users, setUsers] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n\r\n    /**\r\n     * Fetch users from the API when the component mounts.\r\n     */\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            try {\r\n                // Make an HTTP GET request to fetch users\r\n                const response = await axios.get(`${process.env.REACT_APP_API_URL}:4004/users`);\r\n                // Set users data to state\r\n                setUsers(response.data);\r\n            } catch (error) {\r\n                // Handle error and update message\r\n                setMessage('Error fetching users');\r\n            }\r\n        };\r\n\r\n        fetchUsers();\r\n    }, []); // Empty dependency array ensures the effect runs only once on mount\r\n\r\n    return (\r\n        <div>\r\n            <h2>Users List</h2>\r\n            {message && <p>{message}</p>}\r\n            <ul>\r\n                {/* Map through users and display each one */}\r\n                {users.map(user => (\r\n                    <li key={user.id}>\r\n                        {user.username} - {user.email}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReadUser;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Component for managing user roles.\r\n */\r\nconst UserRoleService = () => {\r\n    // State to hold the list of users\r\n    const [users, setUsers] = useState([]);\r\n    // State to hold the selected user ID\r\n    const [selectedUserId, setSelectedUserId] = useState('');\r\n    // State to hold the selected role\r\n    const [selectedRole, setSelectedRole] = useState('admin');\r\n    // State to hold the list of roles assigned to the user\r\n    const [role, setRole] = useState([]);\r\n    // State to hold messages, including errors and success messages\r\n    const [message, setMessage] = useState('');\r\n\r\n    /**\r\n     * Fetches the list of users when the component mounts.\r\n     */\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            try {\r\n                const response = await axios.get(`${process.env.REACT_APP_API_URL}:4023/api/users`);\r\n                setUsers(response.data);\r\n                if (response.data.length > 0) {\r\n                    setSelectedUserId(response.data[0].id);  // Select the first user by default\r\n                }\r\n            } catch (error) {\r\n                setMessage(`Error fetching users: ${error.message}`);\r\n            }\r\n        };\r\n\r\n        fetchUsers();\r\n    }, []);\r\n\r\n    /**\r\n     * Fetches roles for the currently selected user.\r\n     */\r\n    const fetchRoles = async () => {\r\n        try {\r\n            const response = await axios.get(`${process.env.REACT_APP_API_URL}:4023/api/roles/${selectedUserId}`);\r\n            setRole(response.data.role || []);\r\n            setMessage('Roles retrieved successfully');\r\n        } catch (error) {\r\n            if (error.response && error.response.status === 404) {\r\n                setMessage('User not found');\r\n            } else {\r\n                setMessage(`Error fetching roles: ${error.message}`);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Adds a new role to the currently selected user.\r\n     */\r\n    const addRole = async () => {\r\n        try {\r\n            await axios.post(`${process.env.REACT_APP_API_URL}:4023/api/roles/add`, { userId: selectedUserId, role: selectedRole });\r\n            fetchRoles(); // Fetch roles again after adding a new one\r\n            setMessage('Role added successfully');\r\n        } catch (error) {\r\n            if (error.response && error.response.status === 404) {\r\n                setMessage('User not found');\r\n            } else {\r\n                setMessage(`Error adding role: ${error.message}`);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>User Role Service</h2>\r\n            <div>\r\n                <label>User:</label>\r\n                <select\r\n                    value={selectedUserId}\r\n                    onChange={(e) => setSelectedUserId(e.target.value)}\r\n                >\r\n                    {users.map(user => (\r\n                        <option key={user.id} value={user.id}>\r\n                            {user.username}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <label>Role:</label>\r\n                <select\r\n                    value={selectedRole}\r\n                    onChange={(e) => setSelectedRole(e.target.value)}\r\n                >\r\n                    <option value=\"admin\">Admin</option>\r\n                    <option value=\"user\">User</option>\r\n                </select>\r\n            </div>\r\n            <button onClick={addRole}>Add Role</button>\r\n            <button onClick={fetchRoles}>Fetch Roles</button>\r\n            {message && <p>{message}</p>}\r\n            <ul>\r\n                {role.map((r, index) => (\r\n                    <li key={index}>{r}</li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserRoleService;\r\n","import React, { useState } from 'react';\r\n\r\nconst CreateCommentary = () => {\r\n    const [content, setContent] = useState('');\r\n    const [projectId, setProjectId] = useState('');\r\n    const [userId, setUserId] = useState('');\r\n    const [message, setMessage] = useState('');\r\n\r\n    // Handle form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            // Send a POST request to create a new commentary\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}:4009/api/commentaries/create`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ content, projectId, userId }), // Send the commentary data as JSON\r\n            });\r\n    \r\n            if (response.ok) {\r\n                const responseData = await response.json();\r\n                console.log('Commentary created:', responseData.commentary);\r\n                setMessage('Commentary created successfully!'); // Display success message\r\n            } else {\r\n                const errorData = await response.json();\r\n                setMessage(`Failed to create commentary: ${errorData.message}`); // Display error message\r\n            }\r\n        } catch (error) {\r\n            setMessage(`Error creating commentary: ${error.message}`); // Handle any network or other errors\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <label>Content:</label>\r\n                <input \r\n                    type=\"text\" \r\n                    value={content} \r\n                    onChange={(e) => setContent(e.target.value)} \r\n                    required \r\n                />\r\n            </div>\r\n            <div>\r\n                <label>Project ID:</label>\r\n                <input \r\n                    type=\"text\" \r\n                    value={projectId} \r\n                    onChange={(e) => setProjectId(e.target.value)} \r\n                    required \r\n                />\r\n            </div>\r\n            <div>\r\n                <label>User ID:</label>\r\n                <input \r\n                    type=\"text\" \r\n                    value={userId} \r\n                    onChange={(e) => setUserId(e.target.value)} \r\n                    required \r\n                />\r\n            </div>\r\n            <button type=\"submit\">Create Commentary</button>\r\n            {message && <p>{message}</p>} {/* Display message if there is any */}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default CreateCommentary;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst DeleteCommentary = () => {\r\n    const [commentaryId, setCommentaryId] = useState('');\r\n    const [message, setMessage] = useState('');\r\n\r\n    // Handle the delete action\r\n    const handleDelete = async () => {\r\n        try {\r\n            // Send a DELETE request to delete the commentary by ID\r\n            const response = await axios.delete(`${process.env.REACT_APP_API_URL}:4010/api/commentaries/delete/${commentaryId}`);\r\n            setMessage(response.data.message); // Display success message\r\n        } catch (error) {\r\n            setMessage('Error deleting commentary: ' + (error.response?.data?.message || error.message)); // Display error message\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Delete Commentary</h2>\r\n            <div>\r\n                <label>Commentary ID:</label>\r\n                <input \r\n                    type=\"text\" \r\n                    value={commentaryId} \r\n                    onChange={(e) => setCommentaryId(e.target.value)} \r\n                    required \r\n                />\r\n            </div>\r\n            <button onClick={handleDelete}>Delete Commentary</button>\r\n            {message && <p>{message}</p>} {/* Display message if there is any */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeleteCommentary;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Component to update a commentary.\r\n */\r\nconst UpdateCommentary = () => {\r\n    // State to hold the ID of the commentary to update\r\n    const [commentaryId, setCommentaryId] = useState('');\r\n    // State to hold the new content for the commentary\r\n    const [content, setContent] = useState('');\r\n    // State to hold messages, including errors and success messages\r\n    const [message, setMessage] = useState('');\r\n\r\n    /**\r\n     * Handles the update of a commentary by making an HTTP PUT request.\r\n     */\r\n    const handleUpdate = async () => {\r\n        try {\r\n            // Make an HTTP PUT request to update the commentary\r\n            const response = await axios.put(`${process.env.REACT_APP_API_URL}:4011/api/commentaries/update/${commentaryId}`, { content });\r\n            // Set the success message from the response\r\n            setMessage(response.data.message);\r\n        } catch (error) {\r\n            // Set the error message from the response or default to the error message\r\n            setMessage('Error updating commentary: ' + (error.response?.data?.message || error.message));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Update Commentary</h2>\r\n            <div>\r\n                <label>Commentary ID:</label>\r\n                <input \r\n                    type=\"text\" \r\n                    value={commentaryId} \r\n                    onChange={(e) => setCommentaryId(e.target.value)} \r\n                    required \r\n                />\r\n            </div>\r\n            <div>\r\n                <label>New Content:</label>\r\n                <input \r\n                    type=\"text\" \r\n                    value={content} \r\n                    onChange={(e) => setContent(e.target.value)} \r\n                    required \r\n                />\r\n            </div>\r\n            <button onClick={handleUpdate}>Update Commentary</button>\r\n            {message && <p>{message}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpdateCommentary;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Component to read and display commentaries for a specific project.\r\n */\r\nconst ReadCommentaries = () => {\r\n    // State to store the project ID, list of commentaries, and message\r\n    const [projectId, setProjectId] = useState('');\r\n    const [commentaries, setCommentaries] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n\r\n    /**\r\n     * Fetches commentaries for the given project ID.\r\n     * Sends a GET request to the server to retrieve commentaries.\r\n     * Updates the state with retrieved data or an error message.\r\n     */\r\n    const fetchCommentaries = async () => {\r\n        if (!projectId) {\r\n            setMessage('Please enter a Project ID');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Sends a GET request to fetch commentaries for the project\r\n            const response = await axios.get(`${process.env.REACT_APP_API_URL}:4012/api/commentaries/${projectId}`);\r\n            if (response.data.length === 0) {\r\n                setMessage('No commentaries found for this project');\r\n                setCommentaries([]);\r\n            } else {\r\n                setCommentaries(response.data);\r\n                setMessage('Commentaries retrieved successfully');\r\n            }\r\n        } catch (error) {\r\n            // Updates the message state with an error message and clears commentaries\r\n            setMessage(`Error fetching commentaries: ${error.message}`);\r\n            setCommentaries([]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Read Commentaries</h2>\r\n            {/* Input field for entering Project ID */}\r\n            <div>\r\n                <label>Project ID:</label>\r\n                <input \r\n                    type=\"text\" \r\n                    value={projectId} \r\n                    onChange={(e) => setProjectId(e.target.value)} \r\n                    required \r\n                />\r\n            </div>\r\n            {/* Button to fetch commentaries */}\r\n            <button onClick={fetchCommentaries}>Fetch Commentaries</button>\r\n            {/* Display message if there is any */}\r\n            {message && <p>{message}</p>}\r\n            {/* List of commentaries */}\r\n            <ul>\r\n                {commentaries.map(commentary => (\r\n                    <li key={commentary.id}>\r\n                        {commentary.comment} (User ID: {commentary.user_id}) (Created at: {commentary.createdAt}) (Updated at: {commentary.updatedAt})\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReadCommentaries;\r\n","import React, { useState } from 'react';\r\n\r\nconst CreateDocument = () => {\r\n    const [title, setTitle] = useState('');\r\n    const [content, setContent] = useState('');\r\n    const [projectId, setProjectId] = useState('');\r\n    const [userId, setUserId] = useState('');\r\n    const [message, setMessage] = useState('');\r\n\r\n    // Handle form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            // Send a POST request to create a new document\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}:4013/api/documents`, { \r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ title, content, projectId, userId }), // Send the document data as JSON\r\n            });\r\n\r\n            if (response.ok) {\r\n                const responseData = await response.json();\r\n                console.log('Document created:', responseData.document);\r\n                setMessage('Document created successfully!'); // Display success message\r\n            } else {\r\n                const errorData = await response.json();\r\n                setMessage(`Failed to create document: ${errorData.message}`); // Display error message\r\n            }\r\n        } catch (error) {\r\n            setMessage(`Error creating document: ${error.message}`); // Handle any network or other errors\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Create Document</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label>Title:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        value={title} \r\n                        onChange={(e) => setTitle(e.target.value)} \r\n                        required \r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Content:</label>\r\n                    <textarea \r\n                        value={content} \r\n                        onChange={(e) => setContent(e.target.value)} \r\n                        required \r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Project ID:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        value={projectId} \r\n                        onChange={(e) => setProjectId(e.target.value)} \r\n                        required \r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>User ID:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        value={userId} \r\n                        onChange={(e) => setUserId(e.target.value)} \r\n                        required \r\n                    />\r\n                </div>\r\n                <button type=\"submit\">Create Document</button>\r\n            </form>\r\n            {message && <p>{message}</p>} {/* Display message if there is any */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateDocument;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Component to handle the deletion of a document.\r\n */\r\nconst DeleteDocument = () => {\r\n    // State to store the document ID input by the user\r\n    const [documentId, setDocumentId] = useState('');\r\n    // State to store and display messages to the user\r\n    const [message, setMessage] = useState('');\r\n\r\n    /**\r\n     * Handles the document deletion process.\r\n     * Sends a DELETE request to the server and updates the message state based on the response.\r\n     */\r\n    const handleDelete = async () => {\r\n        try {\r\n            // Sends a DELETE request to the API with the document ID\r\n            const response = await axios.delete(`${process.env.REACT_APP_API_URL}:4014/api/documents/${documentId}`);\r\n            // Updates the message state with a success message\r\n            setMessage('Deleted document successfully: ' + response.data.message);\r\n        } catch (error) {\r\n            // Updates the message state with an error message\r\n            setMessage('Error deleting document: ' + (error.response?.data?.message || error.message));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Delete Document</h2>\r\n            {/* Form to input document ID and trigger the deletion */}\r\n            <form onSubmit={(e) => { e.preventDefault(); handleDelete(); }}>\r\n                <div>\r\n                    <label>Document ID:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        value={documentId} \r\n                        onChange={(e) => setDocumentId(e.target.value)} \r\n                        required \r\n                    />\r\n                </div>\r\n                <button type=\"submit\">Delete Document</button>\r\n            </form>\r\n            {/* Display message if there is any */}\r\n            {message && <p>{message}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeleteDocument;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Component to update a document's details.\r\n */\r\nconst UpdateDocument = () => {\r\n    // State to hold the ID of the document to update\r\n    const [documentId, setDocumentId] = useState('');\r\n    // State to hold the new title for the document\r\n    const [title, setTitle] = useState('');\r\n    // State to hold the new content for the document\r\n    const [content, setContent] = useState('');\r\n    // State to hold messages, including errors and success messages\r\n    const [message, setMessage] = useState('');\r\n\r\n    /**\r\n     * Handles the update of a document by making an HTTP PUT request.\r\n     * This function is called when the form is submitted.\r\n     */\r\n    const handleUpdate = async (event) => {\r\n        event.preventDefault(); // Prevents the default form submission behavior\r\n        try {\r\n            // Make an HTTP PUT request to update the document\r\n            const response = await axios.put(`${process.env.REACT_APP_API_URL}:4015/api/documents/${documentId}`, { title, content });\r\n            // Set the success message from the response\r\n            setMessage(response.data.message);\r\n        } catch (error) {\r\n            // Set the error message from the response or default to the error message\r\n            setMessage('Error updating document: ' + (error.response?.data?.message || error.message));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Update Document</h2>\r\n            <form onSubmit={handleUpdate}>\r\n                <div>\r\n                    <label>Document ID:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        value={documentId} \r\n                        onChange={(e) => setDocumentId(e.target.value)} \r\n                        required \r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Title:</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        value={title} \r\n                        onChange={(e) => setTitle(e.target.value)} \r\n                        required \r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Content:</label>\r\n                    <textarea \r\n                        value={content} \r\n                        onChange={(e) => setContent(e.target.value)} \r\n                        required \r\n                    />\r\n                </div>\r\n                <button type=\"submit\">Update Document</button>\r\n            </form>\r\n            {message && <p>{message}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpdateDocument;\r\n","import React, { useState } from 'react';\r\n\r\nconst CreateProject = () => {\r\n    const [name, setName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [userId, setUserId] = useState('');\r\n    const [message, setMessage] = useState('');\r\n\r\n    // Handle form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            // Send a POST request to create a new project\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}:4005/api/projects/create`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ name, description, userId }), // Send the project data as JSON\r\n            });\r\n    \r\n            if (response.ok) {\r\n                const responseData = await response.json();\r\n                console.log('Project created:', responseData.project);\r\n                setMessage('Project created successfully!'); // Display success message\r\n            } else {\r\n                const errorData = await response.json();\r\n                setMessage(`Failed to create project: ${errorData.message}`); // Display error message\r\n            }\r\n        } catch (error) {\r\n            setMessage(`Failed to create project: ${error.message}`); // Handle any network or other errors\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Create Project</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label>Project Name</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        value={name} \r\n                        onChange={(e) => setName(e.target.value)} \r\n                        required \r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Description</label>\r\n                    <textarea \r\n                        value={description} \r\n                        onChange={(e) => setDescription(e.target.value)} \r\n                        required \r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>User ID</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        value={userId} \r\n                        onChange={(e) => setUserId(e.target.value)} \r\n                        required \r\n                    />\r\n                </div>\r\n                <button type=\"submit\">Create Project</button>\r\n            </form>\r\n            {message && <p>{message}</p>} {/* Display message if there is any */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateProject;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst DeleteProject = () => {\r\n    const [projectId, setProjectId] = useState(''); // State to hold the project ID to be deleted\r\n    const [message, setMessage] = useState(''); // State to hold messages (success or error)\r\n\r\n    // Handle the delete action\r\n    const handleDelete = async () => {\r\n        try {\r\n            // Send a DELETE request to delete the project by ID\r\n            const response = await axios.delete(`${process.env.REACT_APP_API_URL}:4006/api/projects/delete/${projectId}`);\r\n            setMessage('Deleted project successfully: ' + response.data.message); // Display success message\r\n        } catch (error) {\r\n            setMessage('Error deleting project: ' + (error.response?.data?.message || error.message)); // Display error message\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Delete Project</h2>\r\n            <div>\r\n                <label>Project ID:</label>\r\n                <input \r\n                    type=\"text\" \r\n                    value={projectId} \r\n                    onChange={(e) => setProjectId(e.target.value)} \r\n                    required \r\n                />\r\n            </div>\r\n            <button onClick={handleDelete}>Delete Project</button>\r\n            {message && <p>{message}</p>} {/* Display feedback message */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeleteProject;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Component to update a project's details.\r\n */\r\nconst UpdateProject = () => {\r\n    // State to hold the ID of the project to update\r\n    const [projectId, setProjectId] = useState('');\r\n    // State to hold the new name for the project\r\n    const [name, setName] = useState('');\r\n    // State to hold the new description for the project\r\n    const [description, setDescription] = useState('');\r\n    // State to hold messages, including errors and success messages\r\n    const [message, setMessage] = useState('');\r\n\r\n    /**\r\n     * Handles the update of a project by making an HTTP PUT request.\r\n     * This function is called when the user clicks the update button.\r\n     */\r\n    const handleUpdate = async () => {\r\n        try {\r\n            // Make an HTTP PUT request to update the project\r\n            const response = await axios.put(`${process.env.REACT_APP_API_URL}:4007/api/projects/update/${projectId}`, { name, description });\r\n            // Set the success message from the response\r\n            setMessage(response.data.message);\r\n        } catch (error) {\r\n            // Set the error message from the response or default to the error message\r\n            setMessage('Error updating project: ' + (error.response?.data?.message || error.message));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Update Project</h2>\r\n            <div>\r\n                <label>Project ID:</label>\r\n                <input \r\n                    type=\"text\" \r\n                    value={projectId} \r\n                    onChange={(e) => setProjectId(e.target.value)} \r\n                    required \r\n                />\r\n            </div>\r\n            <div>\r\n                <label>Name:</label>\r\n                <input \r\n                    type=\"text\" \r\n                    value={name} \r\n                    onChange={(e) => setName(e.target.value)} \r\n                    required \r\n                />\r\n            </div>\r\n            <div>\r\n                <label>Description:</label>\r\n                <input \r\n                    type=\"text\" \r\n                    value={description} \r\n                    onChange={(e) => setDescription(e.target.value)} \r\n                    required \r\n                />\r\n            </div>\r\n            <button onClick={handleUpdate}>Update Project</button>\r\n            {message && <p>{message}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpdateProject;\r\n","import React from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\n/**\r\n * GraphQL query to fetch projects.\r\n */\r\nconst GET_PROJECTS = gql`\r\n    query GetProjects {\r\n        getProjects {\r\n            id\r\n            name\r\n            description\r\n            user_id\r\n        }\r\n    }\r\n`;\r\n\r\n/**\r\n * Component to read and display a list of projects using GraphQL.\r\n */\r\nconst ReadProject = () => {\r\n    // Execute the GET_PROJECTS query and manage the loading, error, and data states\r\n    const { loading, error, data } = useQuery(GET_PROJECTS);\r\n\r\n    // Display loading message while the query is in progress\r\n    if (loading) return <p>Loading...</p>;\r\n    // Display error message if the query fails\r\n    if (error) return <p>Error: {error.message}</p>;\r\n\r\n    return (\r\n        <div>\r\n            <h2>Projects</h2>\r\n            <ul>\r\n                {/* Map through the projects and display each one */}\r\n                {data.getProjects.map((project) => (\r\n                    <li key={project.id}>\r\n                        <p><strong>Name:</strong> {project.name}</p>\r\n                        <p><strong>Description:</strong> {project.description}</p>\r\n                        <p><strong>User ID:</strong> {project.user_id}</p>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReadProject;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\n/**\r\n * Component to manage project subscriptions by subscribing users to projects and displaying current subscriptions.\r\n */\r\nconst ProjectSubscriptionService = () => {\r\n    // State to store the user ID and project ID\r\n    const [userId, setUserId] = useState('');\r\n    const [projectId, setProjectId] = useState('');\r\n    // State to store messages and list of subscriptions\r\n    const [message, setMessage] = useState('');\r\n    const [subscriptions, setSubscriptions] = useState([]);\r\n\r\n    /**\r\n     * Handles the subscription of a user to a project.\r\n     * Sends a POST request to the server with user ID and project ID.\r\n     */\r\n    const subscribeToProject = async () => {\r\n        try {\r\n            // Sends a POST request to subscribe a user to a project\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}:4021/api/subscribe`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ user_id: userId, project_id: projectId })\r\n            });\r\n\r\n            const result = await response.json();\r\n            setMessage(result.message);\r\n            fetchSubscriptions();  // Fetch the updated list of subscriptions\r\n        } catch (error) {\r\n            // Updates the message state with an error message\r\n            setMessage('Error subscribing to project: ' + error.message);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Fetches the list of current subscriptions from the server.\r\n     * Sends a GET request and updates the subscriptions state with the response data.\r\n     */\r\n    const fetchSubscriptions = async () => {\r\n        try {\r\n            // Sends a GET request to fetch the list of subscriptions\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}:4021/api/subscriptions`);\r\n            const result = await response.json();\r\n            setSubscriptions(result);\r\n        } catch (error) {\r\n            // Updates the message state with an error message\r\n            setMessage('Error fetching subscriptions: ' + error.message);\r\n        }\r\n    };\r\n\r\n    // Fetch subscriptions when the component mounts\r\n    useEffect(() => {\r\n        fetchSubscriptions();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Subscribe to Project</h2>\r\n            {/* Input for user ID */}\r\n            <input\r\n                type=\"text\"\r\n                value={userId}\r\n                onChange={(e) => setUserId(e.target.value)}\r\n                placeholder=\"User ID\"\r\n            />\r\n            {/* Input for project ID */}\r\n            <input\r\n                type=\"text\"\r\n                value={projectId}\r\n                onChange={(e) => setProjectId(e.target.value)}\r\n                placeholder=\"Project ID\"\r\n            />\r\n            {/* Button to subscribe to the project */}\r\n            <button onClick={subscribeToProject}>Subscribe</button>\r\n            {/* Display message if there is any */}\r\n            {message && <p>{message}</p>}\r\n            <h3>Subscriptions:</h3>\r\n            {/* List of subscriptions */}\r\n            <ul>\r\n                {subscriptions.map(sub => (\r\n                    <li key={sub.id}>\r\n                        User {sub.user_id} subscribed to Project {sub.project_id} on {new Date(sub.created_at).toLocaleString()}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProjectSubscriptionService;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Component to fetch and display tasks from an API.\r\n */\r\nconst ReadTask = () => {\r\n    // State to hold the list of tasks and messages\r\n    const [tasks, setTasks] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n\r\n    /**\r\n     * Fetch tasks from the API when the component mounts.\r\n     */\r\n    useEffect(() => {\r\n        const fetchTasks = async () => {\r\n            try {\r\n                // Make an HTTP GET request to fetch tasks\r\n                const response = await axios.get(`${process.env.REACT_APP_API_URL}:4025/api/tasks`);\r\n                // Set tasks data to state and update message\r\n                setTasks(response.data.tasks || []);\r\n                setMessage('Tasks retrieved successfully');\r\n            } catch (error) {\r\n                // Handle error and update message\r\n                setMessage(`Error fetching tasks: ${error.message}`);\r\n            }\r\n        };\r\n\r\n        fetchTasks();\r\n    }, []); // Empty dependency array ensures the effect runs only once on mount\r\n\r\n    return (\r\n        <div>\r\n            <h2>Read Tasks</h2>\r\n            {message && <p>{message}</p>}\r\n            <ul>\r\n                {/* Map through tasks and display each one */}\r\n                {tasks.map(task => (\r\n                    <li key={task.id}>\r\n                        <h3>{task.title}</h3>\r\n                        <p>{task.description}</p>\r\n                        <small>Status: {task.status}</small><br />\r\n                        <small>Created at: {task.createdAt}</small><br />\r\n                        <small>Updated at: {task.updatedAt}</small>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReadTask;\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CreateTask = () => {\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [message, setMessage] = useState('');\r\n\r\n    // Handle form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            // Send a POST request to create a new task\r\n            const response = await axios.post(`${process.env.REACT_APP_API_URL}:4024/api/tasks`, { title, description });\r\n            setMessage('Task created successfully: ' + response); // Display success message\r\n        } catch (error) {\r\n            setMessage('Error creating task: ' + (error.response?.data?.message || error.message)); // Display error message\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Create Task</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Task Title\"\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value)}\r\n                    required\r\n                />\r\n                <textarea\r\n                    placeholder=\"Task Description\"\r\n                    value={description}\r\n                    onChange={(e) => setDescription(e.target.value)}\r\n                    required\r\n                />\r\n                <button type=\"submit\">Create Task</button>\r\n            </form>\r\n            {message && <p>{message}</p>} {/* Display message if there is any */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateTask;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\r\nimport './css/styles.css';  // Import CSS file for styling\r\n\r\n// Import components for different routes\r\nimport Login from './components/Login';\r\nimport FileUpload from './components/FileUpload';\r\nimport OrderService from './components/OrderService';\r\nimport ProductService from './components/ProductService';\r\nimport Chat from './components/Chat';\r\n\r\nimport CreateUser from './components/CreateUser';\r\nimport DeleteUser from './components/DeleteUser';\r\nimport UpdateUser from './components/UpdateUser';\r\nimport ReadUser from './components/ReadUser';\r\nimport UserRoleService from './components/UserRoleService';\r\n\r\nimport CreateCommentary from './components/CreateCommentary';\r\nimport DeleteCommentary from './components/DeleteCommentary';\r\nimport UpdateCommentary from './components/UpdateCommentary';\r\nimport ReadCommentaries from './components/ReadCommentaries';\r\n\r\nimport CreateDocument from './components/CreateDocument';\r\nimport DeleteDocument from './components/DeleteDocument';\r\nimport UpdateDocument from './components/UpdateDocument';\r\n\r\nimport CreateProject from './components/CreateProject';\r\nimport DeleteProject from './components/DeleteProject';\r\nimport UpdateProject from './components/UpdateProject';\r\nimport ReadProject from './components/ReadProject';\r\nimport ProjectSubscriptionService from './components/ProjectSubscriptionService';\r\n\r\nimport ReadTask from './components/ReadTask';\r\nimport CreateTask from './components/CreateTask';\r\n\r\n// Main App component\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"container\">\r\n        <h1>Microservices Frontend</h1>\r\n        <nav>\r\n          <ul className=\"nav-links\">\r\n            {/* Row 1 of links */}\r\n            <li><Link to=\"/login\">Login</Link></li>\r\n            <li><Link to=\"/create-user\">Create User</Link></li>\r\n            <li><Link to=\"/delete-user\">Delete User</Link></li>\r\n            <li><Link to=\"/update-user\">Update User</Link></li>\r\n            <li><Link to=\"/read-user\">Read User</Link></li>\r\n            <li><Link to=\"/user-role-service\">User Role Service</Link></li>\r\n            <li><Link to=\"/createcommentary\">Create Commentary</Link></li>\r\n            <li><Link to=\"/deletecommentary\">Delete Commentary</Link></li>\r\n            <li><Link to=\"/updatecommentary\">Update Commentary</Link></li>\r\n            <li><Link to=\"/readcommentaries\">Read Commentaries</Link></li>\r\n\r\n            {/* Row 2 of links */}\r\n            <li><Link to=\"/createdocument\">Create Document</Link></li>\r\n            <li><Link to=\"/deletedocument\">Delete Document</Link></li>\r\n            <li><Link to=\"/updatedocument\">Update Document</Link></li>\r\n            <li><Link to=\"/createproject\">Create Project</Link></li>\r\n            <li><Link to=\"/deleteproject\">Delete Project</Link></li>\r\n            <li><Link to=\"/updateproject\">Update Project</Link></li>\r\n            <li><Link to=\"/readproject\">Read Project</Link></li>\r\n            <li><Link to=\"/projectSubscriptionService\">Project Subscription Service</Link></li>\r\n            <li><Link to=\"/readtask-service\">Read Task</Link></li>\r\n            <li><Link to=\"/createtask-service\">Create Task</Link></li>\r\n            <li><Link to=\"/files\">File Upload</Link></li>\r\n            <li><Link to=\"/order-service\">Order</Link></li>\r\n            <li><Link to=\"/product-service\">Product</Link></li>\r\n            <li><Link to=\"/chat-service\">Chat</Link></li>\r\n          </ul>\r\n        </nav>\r\n\r\n        <div className=\"content\">\r\n          <Routes>\r\n            {/* Route definitions */}\r\n            <Route path=\"/login\" element={<Login />} />\r\n            <Route path=\"/files\" element={<FileUpload />} />\r\n\r\n            <Route path=\"/order-service\" element={<OrderService />} />\r\n\r\n            <Route path=\"/readtask-service\" element={<ReadTask />} />\r\n            <Route path=\"/createtask-service\" element={<CreateTask />} />\r\n            \r\n            <Route path=\"/user-role-service\" element={<UserRoleService />} />\r\n            <Route path=\"/chat-service\" element={<Chat />} />\r\n            \r\n            <Route path=\"/projectSubscriptionService\" element={<ProjectSubscriptionService />} />\r\n            \r\n            <Route path=\"/product-service\" element={<ProductService />} />\r\n\r\n            <Route path=\"/create-user\" element={<CreateUser />} />\r\n            <Route path=\"/delete-user\" element={<DeleteUser />} />\r\n            <Route path=\"/update-user\" element={<UpdateUser />} />\r\n            <Route path=\"/read-user\" element={<ReadUser />} />\r\n\r\n            <Route path=\"/createcommentary\" element={<CreateCommentary />} />\r\n            <Route path=\"/deletecommentary\" element={<DeleteCommentary />} />\r\n            <Route path=\"/updatecommentary\" element={<UpdateCommentary />} />\r\n            <Route path=\"/readcommentaries\" element={<ReadCommentaries />} />\r\n\r\n            <Route path=\"/createdocument\" element={<CreateDocument />} />\r\n            <Route path=\"/deletedocument\" element={<DeleteDocument />} />\r\n            <Route path=\"/updatedocument\" element={<UpdateDocument />} />\r\n\r\n            <Route path=\"/createproject\" element={<CreateProject />} />\r\n            <Route path=\"/deleteproject\" element={<DeleteProject />} />\r\n            <Route path=\"/updateproject\" element={<UpdateProject />} />\r\n            <Route path=\"/readproject\" element={<ReadProject />} />\r\n          </Routes>\r\n        </div>\r\n        \r\n        <footer>\r\n          <p>SI-001 Microservices Frontend. Made By Ariel Campoverde Siuuuuuu!.</p>\r\n        </footer>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ApolloProvider } from '@apollo/client';\r\nimport App from './app';\r\nimport client from './apolloClient';\r\n\r\n// Render the App component within the ApolloProvider\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);\r\n","const { ApolloClient, InMemoryCache, HttpLink } = require('@apollo/client');\r\n\r\n// Configure the Apollo Client\r\nconst client = new ApolloClient({\r\n    link: new HttpLink({\r\n        // URI of GraphQL server\r\n        uri: `${process.env.REACT_APP_API_URL}:4008/graphql`,\r\n    }),\r\n    cache: new InMemoryCache(), // Configure the memory cache\r\n});\r\n\r\nmodule.exports = client;\r\n"],"sourceRoot":""}