name: Deploy and build dockers

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}


    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: username/repo:latest
        build-args:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
      


    - name: Build up Dockers
      run: |
        services=(
          "createcommentary" "createproject" "deletecommentary" "deleteproject" 
          "notificationhistory" "readcommentaries" "readproject" "receivenotification" 
          "sendnotification" "updatecommentary" "updateproject" "audit-service" "create-user"
          "createdocument" "delete-user" "deletedocument" "login" "read-user" "readdocument"
          "update-user" "updatedocument"
        )
        
        for service in "${services[@]}"
        do
          if [ -d "$service" ]; then
            docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest ./$service
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest
          else
            echo "Failed to find the path of directory of service $service"
            exit 1
          fi
        done

    - name: Paths of docker-compose
      run: |
        sed -i 's|build: \./|build: ../|g' ./docker/docker-compose.yml
        echo "Content Updated of docker-compose.yml:"
        cat ./docker/docker-compose.yml

    - name: Clean up previous containers
      run: |
        docker-compose -f ./docker/docker-compose.yml down

    - name: Execute Docker Compose
      run: |
        docker-compose -f ./docker/docker-compose.yml up -d

  deploy-AWS:
    needs: [build-and-push] 
    runs-on: ubuntu-latest

    steps:
    - name: Set permissions for private key
      run: |
        echo "${{ secrets.AWS_PRIVATE_KEY }}" > key.pem
        chmod 600 key.pem

    - name: Install Docker on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          sudo yum update -y
          sudo yum install -y docker
          sudo service docker start
        EOF

    - name: Verify Docker installation
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} "docker --version"
      

    - name: Pull Docker images
      run: |
        services=(
          "createcommentary" "createproject" "deletecommentary" "deleteproject" 
          "notificationhistory" "readcommentaries" "readproject" "receivenotification" 
          "sendnotification" "updatecommentary" "updateproject" "audit-service" "create-user"
          "createdocument" "delete-user" "deletedocument" "login" "read-user" "readdocument"
          "update-user" "updatedocument"
        )

        for service in "${services[@]}"
        do
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} "sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest"
        done

    - name: Stop running containers
      run: |
        services=(
          "createcommentary" "createproject" "deletecommentary" "deleteproject" 
          "notificationhistory" "readcommentaries" "readproject" "receivenotification" 
          "sendnotification" "updatecommentary" "updateproject" "audit-service" "create-user"
          "createdocument" "delete-user" "deletedocument" "login" "read-user" "readdocument"
          "update-user" "updatedocument"
        )

        for service in "${services[@]}"
        do
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} "sudo docker stop $service-plataform-aws || true"
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} "sudo docker rm $service-plataform-aws || true"
        done

    - name: Remove old Docker images
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker image prune -f'

    - name: Run new containers
      run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name create-user-plataform-aws -p 3001:3001 ${{ secrets.DOCKERHUB_USERNAME }}/create-user:latest'
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name read-user-plataform-aws -p 3002:3002 ${{ secrets.DOCKERHUB_USERNAME }}/read-user:latest'
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name update-user-plataform-aws -p 3003:3003 ${{ secrets.DOCKERHUB_USERNAME }}/update-user:latest'
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name delete-user-plataform-aws -p 3004:3004 ${{ secrets.DOCKERHUB_USERNAME }}/delete-user:latest'
    
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name login-plataform-aws -p 3006:3006 ${{ secrets.DOCKERHUB_USERNAME }}/login:latest'          
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name audit-service-plataform-aws -p 3007:3007 ${{ secrets.DOCKERHUB_USERNAME }}/audit-service:latest'
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name deleteproject-plataform-aws -p 3008:3008 ${{ secrets.DOCKERHUB_USERNAME }}/deleteproject:latest'         
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name updateproject-plataform-aws -p 3009:3009 ${{ secrets.DOCKERHUB_USERNAME }}/updateproject:latest'
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name readproject-plataform-aws -p 3010:3010 ${{ secrets.DOCKERHUB_USERNAME }}/readproject:latest'         
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name sendnotification-plataform-aws -p 3011:3011 ${{ secrets.DOCKERHUB_USERNAME }}/sendnotification:latest'
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name receivenotification-plataform-aws -p 3012:3012 ${{ secrets.DOCKERHUB_USERNAME }}/receivenotification:latest'         
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name notificationhistory-plataform-aws -p 3013:3013 ${{ secrets.DOCKERHUB_USERNAME }}/notificationhistory:latest'
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name createcommentary-plataform-aws -p 3014:3014 ${{ secrets.DOCKERHUB_USERNAME }}/createcommentary:latest'
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name readcommentaries-plataform-aws -p 3015:3015 ${{ secrets.DOCKERHUB_USERNAME }}/readcommentaries:latest'          
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name updatecommentary-plataform-aws -p 3016:3016 ${{ secrets.DOCKERHUB_USERNAME }}/updatecommentary:latest'          
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name deletecommentary-plataform-aws -p 3017:3017 ${{ secrets.DOCKERHUB_USERNAME }}/deletecommentary:latest'
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name createproject-plataform-aws -p 3018:3018 ${{ secrets.DOCKERHUB_USERNAME }}/createproject:latest'
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name createdocument-plataform-aws -p 3019:3019 ${{ secrets.DOCKERHUB_USERNAME }}/createdocument:latest'
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name deletedocument-plataform-aws -p 3020:3020 ${{ secrets.DOCKERHUB_USERNAME }}/deletedocument:latest'
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name readdocument-plataform-aws -p 3021:3021 ${{ secrets.DOCKERHUB_USERNAME }}/readdocument:latest'
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker run -d --name updatedocument-plataform-aws -p 3022:3022 ${{ secrets.DOCKERHUB_USERNAME }}/updatedocument:latest'
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
