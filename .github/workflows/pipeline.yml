name: Deploy

on:
  push:
    branches:
      - main
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REGISTRY: 339712766050.dkr.ecr.us-east-2.amazonaws.com  # set this to your ECR registry
  ECR_REPOSITORY: grupo14-cinema-platform           # set this to your Amazon ECR repository name
  ECS_SERVICE: srv-cinema-platform-g14                # set this to your Amazon ECS service name
  ECS_CLUSTER: app-cinema-platform                # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION:  task-cinema-platform-frontend  # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: cinemaFrontend                  # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build up Dockers
      run: |
        services=(
          "createCommentary" "createProject" "deleteCommentary" "deleteProject" 
          "notificationHistory" "readCommentaries" "readProject" "receiveNotification" 
          "sendNotification" "updateCommentary" "updateProject"
        )
        
        for service in "${services[@]}"
        do
          if [ -d "$service" ]; then
            docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest ./$service
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest
          else
            echo "Failed to find the path of directory of service $service"
            exit 1
          fi
        done

    - name: Paths of docker-compose
      run: |
        sed -i 's|build: \./|build: ../|g' ./docker/docker-compose.yml
        echo "Content Updated of docker-compose.yml:"
        cat ./docker/docker-compose.yml

    - name: Clean up previous containers
      run: |
        docker-compose -f ./docker/docker-compose.yml down

    - name: Execute Docker Compose
      run: |
        docker-compose -f ./docker/docker-compose.yml up -d

  deploy-AWS:
    needs: [build-and-push]  
    runs-on: ubuntu-latest

    steps:
    - name: Set permissions for private key
      run: |
        echo "${{ secrets.AWS_PRIVATE_KEY }}" > key.pem
        chmod 600 key.pem

    - name: Pull Docker images
      run: |
        services=(
          "createCommentary" "createProject" "deleteCommentary" "deleteProject" 
          "notificationHistory" "readCommentaries" "readProject" "receiveNotification" 
          "sendNotification" "updateCommentary" "updateProject"
        )

        for service in "${services[@]}"
        do
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} "sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest"
        done

    - name: Stop running containers
      run: |
        services=(
          "createCommentary" "createProject" "deleteCommentary" "deleteProject" 
          "notificationHistory" "readCommentaries" "readProject" "receiveNotification" 
          "sendNotification" "updateCommentary" "updateProject"
        )

        for service in "${services[@]}"
        do
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} "sudo docker stop $service-plataform-aws || true"
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} "sudo docker rm $service-plataform-aws || true"
        done

    - name: Remove old Docker images
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker image prune -f'

    - name: Run new containers
      run: |
        services=(
          "createCommentary" "createProject" "deleteCommentary" "deleteProject" 
          "notificationHistory" "readCommentaries" "readProject" "receiveNotification" 
          "sendNotification" "updateCommentary" "updateProject"
        )

        ports=(3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011)

        i=0
        for service in "${services[@]}"
        do
          port=${ports[$i]}
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} "sudo docker run -d --name $service-plataform-aws -p $((8080 + i)):$port ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest"
          i=$((i + 1))
        done

        
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test

    - name: Deploy Create Document Service
      run: |
        echo "Deploying Create Document Service"
       
       
       
        export DOCUMENT_DB_USER=${{ secrets.DOCUMENT_DB_USER }}
        export DOCUMENT_DB_PASSWORD=${{ secrets.DOCUMENT_DB_PASSWORD }}
        export DOCUMENT_DB_NAME=${{ secrets.DOCUMENT_DB_NAME }}
        export DOCUMENT_DB_PORT=${{ secrets.DOCUMENT_DB_PORT }}
        export PROJECT_DB_HOST=${{ secrets.PROJECT_DB_HOST }}
        export PROJECT_DB_USER=${{ secrets.PROJECT_DB_USER }}
        export PROJECT_DB_PASSWORD=${{ secrets.PROJECT_DB_PASSWORD }}
        export PROJECT_DB_NAME=${{ secrets.PROJECT_DB_NAME }}
        export PROJECT_DB_PORT=${{ secrets.PROJECT_DB_PORT }}
        npm start --prefix createdocument
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy Read Document Service
      run: |
        echo "Deploying Read Document Service"
        export DOCUMENT_DB_HOST=${{ secrets.DOCUMENT_DB_HOST }}
        export DOCUMENT_DB_USER=${{ secrets.DOCUMENT_DB_USER }}
        export DOCUMENT_DB_PASSWORD=${{ secrets.DOCUMENT_DB_PASSWORD }}
        export DOCUMENT_DB_NAME=${{ secrets.DOCUMENT_DB_NAME }}
        export DOCUMENT_DB_PORT=${{ secrets.DOCUMENT_DB_PORT }}
        npm start --prefix readdocument
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy Update Document Service
      run: |
        echo "Deploying Update Document Service"
        export DOCUMENT_DB_HOST=${{ secrets.DOCUMENT_DB_HOST }}
        export DOCUMENT_DB_USER=${{ secrets.DOCUMENT_DB_USER }}
        export DOCUMENT_DB_PASSWORD=${{ secrets.DOCUMENT_DB_PASSWORD }}
        export DOCUMENT_DB_NAME=${{ secrets.DOCUMENT_DB_NAME }}
        export DOCUMENT_DB_PORT=${{ secrets.DOCUMENT_DB_PORT }}
        npm start --prefix updatedocument
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy Delete Document Service
      run: |
        echo "Deploying Delete Document Service"
        export DOCUMENT_DB_HOST=${{ secrets.DOCUMENT_DB_HOST }}
        export DOCUMENT_DB_USER=${{ secrets.DOCUMENT_DB_USER }}
        export DOCUMENT_DB_PASSWORD=${{ secrets.DOCUMENT_DB_PASSWORD }}
        export DOCUMENT_DB_NAME=${{ secrets.DOCUMENT_DB_NAME }}
        export DOCUMENT_DB_PORT=${{ secrets.DOCUMENT_DB_PORT }}
        npm start --prefix deletedocument
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy Create Project Service
      run: |
        echo "Deploying Create Project Service"
       
       
       
        export PROJECT_DB_USER=${{ secrets.PROJECT_DB_USER }}
        export PROJECT_DB_PASSWORD=${{ secrets.PROJECT_DB_PASSWORD }}
        export PROJECT_DB_NAME=${{ secrets.PROJECT_DB_NAME }}
        export PROJECT_DB_PORT=${{ secrets.PROJECT_DB_PORT }}
        export USER_DB_HOST=${{ secrets.USER_DB_HOST }}
        export USER_DB_USER=${{ secrets.USER_DB_USER }}
        export USER_DB_PASSWORD=${{ secrets.USER_DB_PASSWORD }}
        export USER_DB_NAME=${{ secrets.USER_DB_NAME }}
        export USER_DB_PORT=${{ secrets.USER_DB_PORT }}
        npm start --prefix createproject
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy Read Project Service
      run: |
        echo "Deploying Read Project Service"
        export PROJECT_DB_HOST=${{ secrets.PROJECT_DB_HOST }}
        export PROJECT_DB_USER=${{ secrets.PROJECT_DB_USER }}
        export PROJECT_DB_PASSWORD=${{ secrets.PROJECT_DB_PASSWORD }}
        export PROJECT_DB_NAME=${{ secrets.PROJECT_DB_NAME }}
        export PROJECT_DB_PORT=${{ secrets.PROJECT_DB_PORT }}
        npm start --prefix readproject
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy Update Project Service
      run: |
        echo "Deploying Update Project Service"
        export PROJECT_DB_HOST=${{ secrets.PROJECT_DB_HOST }}
        export PROJECT_DB_USER=${{ secrets.PROJECT_DB_USER }}
        export PROJECT_DB_PASSWORD=${{ secrets.PROJECT_DB_PASSWORD }}
        export PROJECT_DB_NAME=${{ secrets.PROJECT_DB_NAME }}
        export PROJECT_DB_PORT=${{ secrets.PROJECT_DB_PORT }}
        npm start --prefix updateproject
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy Delete Project Service
      run: |
        echo "Deploying Delete Project Service"
        export PROJECT_DB_HOST=${{ secrets.PROJECT_DB_HOST }}
        export PROJECT_DB_USER=${{ secrets.PROJECT_DB_USER }}
        export PROJECT_DB_PASSWORD=${{ secrets.PROJECT_DB_PASSWORD }}
        export PROJECT_DB_NAME=${{ secrets.PROJECT_DB_NAME }}
        export PROJECT_DB_PORT=${{ secrets.PROJECT_DB_PORT }}
        npm start --prefix deleteproject
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


    - name: Deploy Create Commentary Service
      run: |
        echo "Deploying Create Commentary Service"
       
       
       
        export COMMENTARY_DB_USER=${{ secrets.COMMENTARY_DB_USER }}
        export COMMENTARY_DB_PASSWORD=${{ secrets.COMMENTARY_DB_PASSWORD }}
        export COMMENTARY_DB_NAME=${{ secrets.COMMENTARY_DB_NAME }}
        export COMMENTARY_DB_PORT=${{ secrets.COMMENTARY_DB_PORT }}
        export USER_DB_HOST=${{ secrets.USER_DB_HOST }}
        export USER_DB_USER=${{ secrets.USER_DB_USER }}
        export USER_DB_PASSWORD=${{ secrets.USER_DB_PASSWORD }}
        export USER_DB_NAME=${{ secrets.USER_DB_NAME }}
        export USER_DB_PORT=${{ secrets.USER_DB_PORT }}
        export PROJECT_DB_HOST=${{ secrets.PROJECT_DB_HOST }}
        export PROJECT_DB_USER=${{ secrets.PROJECT_DB_USER }}
        export PROJECT_DB_PASSWORD=${{ secrets.PROJECT_DB_PASSWORD }}
        export PROJECT_DB_NAME=${{ secrets.PROJECT_DB_NAME }}
        export PROJECT_DB_PORT=${{ secrets.PROJECT_DB_PORT }}
        npm start --prefix createproject
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy Read Commentary Service
      run: |
        echo "Deploying Read Commentary Service"
        export COMMENTARY_DB_HOST=${{ secrets.COMMENTARY_DB_HOST }}
        export COMMENTARY_DB_USER=${{ secrets.COMMENTARY_DB_USER }}
        export COMMENTARY_DB_PASSWORD=${{ secrets.COMMENTARY_DB_PASSWORD }}
        export COMMENTARY_DB_NAME=${{ secrets.COMMENTARY_DB_NAME }}
        export COMMENTARY_DB_PORT=${{ secrets.COMMENTARY_DB_PORT }}
        npm start --prefix readcommentary
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy Update Commentary Service
      run: |
        echo "Deploying Update Commentary Service"
        export COMMENTARY_DB_HOST=${{ secrets.COMMENTARY_DB_HOST }}
        export COMMENTARY_DB_USER=${{ secrets.COMMENTARY_DB_USER }}
        export COMMENTARY_DB_PASSWORD=${{ secrets.COMMENTARY_DB_PASSWORD }}
        export COMMENTARY_DB_NAME=${{ secrets.COMMENTARY_DB_NAME }}
        export COMMENTARY_DB_PORT=${{ secrets.COMMENTARY_DB_PORT }}
        npm start --prefix updatecommentary
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy Delete Commentary Service
      run: |
        echo "Deploying Delete Commentary Service"
        export COMMENTARY_DB_HOST=${{ secrets.COMMENTARY_DB_HOST }}
        export COMMENTARY_DB_USER=${{ secrets.COMMENTARY_DB_USER }}
        export COMMENTARY_DB_PASSWORD=${{ secrets.COMMENTARY_DB_PASSWORD }}
        export COMMENTARY_DB_NAME=${{ secrets.COMMENTARY_DB_NAME }}
        export COMMENTARY_DB_PORT=${{ secrets.COMMENTARY_DB_PORT }}
        npm start --prefix deletecommentary
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
