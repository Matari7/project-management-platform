name: Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build up Dockers
      run: |
        services=(
          "createcommentary" "createproject" "deletecommentary" "deleteproject" 
          "notificationhistory" "readcommentaries" "readproject" "receivenotification" 
          "sendnotification" "updatecommentary" "updateproject"
        )
        
        for service in "${services[@]}"
        do
          if [ -d "$service" ]; then
            docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest ./$service
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest
          else
            echo "Failed to find the path of directory of service $service"
            exit 1
          fi
        done

    - name: Paths of docker-compose
      run: |
        sed -i 's|build: \./|build: ../|g' ./docker/docker-compose.yml
        echo "Content Updated of docker-compose.yml:"
        cat ./docker/docker-compose.yml

    - name: Clean up previous containers
      run: |
        docker-compose -f ./docker/docker-compose.yml down

    - name: Execute Docker Compose
      run: |
        docker-compose -f ./docker/docker-compose.yml up -d

  deploy-AWS:
    needs: [build-and-push] 
    runs-on: ubuntu-latest

    steps:
    - name: Set permissions for private key
      run: |
        echo "${{ secrets.AWS_PRIVATE_KEY }}" > key.pem
        chmod 600 key.pem

    - name: Install Docker on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          sudo yum update -y
          sudo yum install -y docker
          sudo service docker start
        EOF

    - name: Verify Docker installation
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} "docker --version"
      

    - name: Pull Docker images
      run: |
        services=(
          "createcommentary" "createproject" "deletecommentary" "deleteproject" 
          "notificationhistory" "readcommentaries" "readproject" "receivenotification" 
          "sendnotification" "updatecommentary" "updateproject"
        )

        for service in "${services[@]}"
        do
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} "sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest"
        done

    - name: Stop running containers
      run: |
        services=(
          "createcommentary" "createproject" "deletecommentary" "deleteproject" 
          "notificationhistory" "readcommentaries" "readproject" "receivenotification" 
          "sendnotification" "updatecommentary" "updateproject"
        )

        for service in "${services[@]}"
        do
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} "sudo docker stop $service-plataform-aws || true"
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} "sudo docker rm $service-plataform-aws || true"
        done

    - name: Remove old Docker images
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} 'sudo docker image prune -f'

    - name: Run new containers
      run: |
        services=(
          "createcommentary" "createproject" "deletecommentary" "deleteproject" 
          "notificationhistory" "readcommentaries" "readproject" "receivenotification" 
          "sendnotification" "updatecommentary" "updateproject"
        )

        ports=(3014 3018 3017 3008 3013 3015 3010 3012 3011 3016 3009)

        i=0
        for service in "${services[@]}"
        do
          port=${ports[$i]}
          ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST }} "sudo docker run -d --name $service-plataform-aws -p $((8080 + i)):$port ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest"
          i=$((i + 1))
        done

    - name: Update Load Balancer
      run: |
          aws elbv2 register-targets --target-group-arn ${{ secrets.TARGET_GROUP_ARN }} --targets Id=<INSTANCE_ID_1> Id=<INSTANCE_ID_2>
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}