name: Deploy and build dockers on servers

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and Push Dockers
      run: |
        services=(
          "frontend" "create-user" "delete-user" "update-user" "read-user" "createproject" "deleteproject" 
          "updateproject" "readproject" "createcommentary" "deletecommentary" 
          "updatecommentary" "readcommentaries" "createdocument" "deletedocument" 
          "updatedocument" "login" "chat-service"
          "user-role-service" "createtask-service" "readtask-service"
        )
        
        for service in "${services[@]}"
        do
          if [ -d "$service" ]; then
            docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest ./$service
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest
          else
            echo "Failed to find the path of directory of service $service"
            exit 1
          fi
        done

    - name: Build and Push projectSubscriptionService
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/projectsubscriptionservice:latest ./projectSubscriptionService
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/projectsubscriptionservice:latest

    - name: Paths of docker-compose
      run: |
        sed -i 's|build: \./|build: ../|g' ./docker/docker-compose.yml
        echo "Content Updated of docker-compose.yml:"
        cat ./docker/docker-compose.yml

    - name: Create network
      run: |
        docker network create web || true

    - name: Clean up previous containers
      run: |
        docker-compose -f ./docker/docker-compose.yml down || true

    - name: Execute Docker Compose
      run: |
        docker-compose -f ./docker/docker-compose.yml up -d

  deploy-DigitalOcean:
    needs: [build-and-push] 
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu, centos]
        include:
          - os: ubuntu
            droplet_ip: ${{ secrets.DROPLET_IP_UBUNTU }}
          - os: centos
            droplet_ip: ${{ secrets.DROPLET_IP_CENTOS }}

    steps:
    - name: Set permissions for private key
      run: |
        echo "${{ secrets.DIGITALOCEAN_SSH_KEY }}" > key
        chmod 600 key

    - name: Install Docker on Droplet
      run: |
        ssh -o StrictHostKeyChecking=no -i key root@${{ matrix.droplet_ip }} << 'EOF'
          if [[ "${{ matrix.os }}" == "ubuntu" ]]; then
            apt-get update
            apt-get install -y docker.io docker-compose
          elif [[ "${{ matrix.os }}" == "centos" ]]; then
            yum update -y
            yum install -y yum-utils
            yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            yum install -y docker-ce docker-ce-cli containerd.io
            systemctl start docker
            systemctl enable docker
            curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          fi
          systemctl start docker
          systemctl enable docker
        EOF
        
    - name: Verify Docker installation
      run: |
        ssh -o StrictHostKeyChecking=no -i key root@${{ matrix.droplet_ip }} "docker --version && docker-compose --version"

    - name: Create network on DigitalOcean
      run: |
        ssh -o StrictHostKeyChecking=no -i key root@${{ matrix.droplet_ip }} "docker network create web || true"


    - name: Pull Docker images
      run: |
        services=(
          "frontend" "create-user" "delete-user" "update-user" "read-user" "createproject" "deleteproject" 
          "updateproject" "readproject" "createcommentary" "deletecommentary" 
          "updatecommentary" "readcommentaries" "createdocument" "deletedocument" 
          "updatedocument" "login" "chat-service" "projectsubscriptionservice"
          "user-role-service" "createtask-service" "readtask-service"
        )

        for service in "${services[@]}"
        do
          ssh -o StrictHostKeyChecking=no -i key root@${{ matrix.droplet_ip }} "sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest"
        done

    - name: Stop running containers
      run: |
        services=(
          "frontend" "create-user" "delete-user" "update-user" "read-user" "createproject" "deleteproject" 
          "updateproject" "readproject" "createcommentary" "deletecommentary" 
          "updatecommentary" "readcommentaries" "createdocument" "deletedocument" 
          "updatedocument" "login" "chat-service" "projectsubscriptionservice"
          "user-role-service" "createtask-service" "readtask-service"
        )

        for service in "${services[@]}"
        do
          ssh -o StrictHostKeyChecking=no -i key root@${{ matrix.droplet_ip }} "sudo docker stop $service-plataform-do || true"
          ssh -o StrictHostKeyChecking-no -i key root@${{ matrix.droplet_ip }} "sudo docker rm $service-plataform-do || true"
        done

    - name: Remove old Docker images
      run: |
        ssh -o StrictHostKeyChecking-no -i key root@${{ matrix.droplet_ip }} 'sudo docker image prune -f'

    - name: Run new containers
      run: |
        services=(
          "frontend" "create-user" "delete-user" "update-user" "read-user" "createproject" "deleteproject" 
          "updateproject" "readproject" "createcommentary" "deletecommentary" 
          "updatecommentary" "readcommentaries" "createdocument" "deletedocument" 
          "updatedocument" "login" "chat-service" "projectsubscriptionservice"
          "user-role-service" "createtask-service" "readtask-service"
        )
        
        ports=(3000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 4014 4015 5000 8080 4021 4023 4024 4025)

        for index in ${!services[@]}
        do
          service=${services[$index]}
          port=${ports[$index]}
          ssh -o StrictHostKeyChecking-no -i key root@${{ matrix.droplet_ip }} "sudo docker run -d --name $service-plataform-do -p $port:$port ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest"
        done
