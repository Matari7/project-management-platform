name: Deploy and build dockers

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and Push Dockers
      run: |
        services=(
          "frontend" "create-user" "delete-user" "update-user" "read-user" "createproject" "deleteproject" 
          "updateproject" "readproject" "createcommentary" "deletecommentary" 
          "updatecommentary" "readcommentaries" "createdocument" "deletedocument" 
          "updatedocument" "login" "chat-service"
          "user-role-service" "createtask-service" "readtask-service"
        )
        
        for service in "${services[@]}"
        do
          if [ -d "$service" ]; then
            docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest ./$service
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest
          else
            echo "Failed to find the path of directory of service $service"
            exit 1
          fi
        done

    - name: Build and Push projectSubscriptionService
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/projectsubscriptionservice:latest ./projectSubscriptionService
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/projectsubscriptionservice:latest

  deploy-Ubuntu:
    needs: [build-and-push] 
    runs-on: ubuntu-latest

    steps:
    - name: Set permissions for private key
      run: |
        echo "${{ secrets.DIGITALOCEAN_SSH_KEY }}" > key
        chmod 600 key

    - name: Deploy to Ubuntu Droplet
      run: |
        ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_UBUNTU }} << 'EOF'
          apt-get update
          apt-get install -y docker.io docker-compose
          systemctl start docker
          systemctl enable docker
          docker network create web || true
        EOF
        
    - name: Pull Docker images on Ubuntu
      run: |
        services=(
          "frontend" "create-user" "delete-user" "update-user" "read-user" "createproject" "deleteproject" 
          "updateproject" "readproject" "createcommentary" "deletecommentary" 
          "updatecommentary" "readcommentaries" "createdocument" "deletedocument" 
          "updatedocument" "login" "chat-service" "projectsubscriptionservice"
          "user-role-service" "createtask-service" "readtask-service"
        )

        for service in "${services[@]}"
        do
          ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_UBUNTU }} "sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest"
        done

    - name: Stop running containers on Ubuntu
      run: |
        services=(
          "frontend" "create-user" "delete-user" "update-user" "read-user" "createproject" "deleteproject" 
          "updateproject" "readproject" "createcommentary" "deletecommentary" 
          "updatecommentary" "readcommentaries" "createdocument" "deletedocument" 
          "updatedocument" "login" "chat-service" "projectsubscriptionservice"
          "user-role-service" "createtask-service" "readtask-service"
        )

        for service in "${services[@]}"
        do
          ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_UBUNTU }} "sudo docker stop $service-plataform-do || true"
          ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_UBUNTU }} "sudo docker rm $service-plataform-do || true"
        done

    - name: Remove old Docker images on Ubuntu
      run: |
        ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_UBUNTU }} 'sudo docker image prune -f'

    - name: Run new containers on Ubuntu
      run: |
        services=(
          "frontend" "create-user" "delete-user" "update-user" "read-user" "createproject" "deleteproject" 
          "updateproject" "readproject" "createcommentary" "deletecommentary" 
          "updatecommentary" "readcommentaries" "createdocument" "deletedocument" 
          "updatedocument" "login" "chat-service" "projectsubscriptionservice"
          "user-role-service" "createtask-service" "readtask-service"
        )
        
        ports=(3000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 4014 4015 5000 8080 4021 4023 4024 4025)

        for index in ${!services[@]}
        do
          service=${services[$index]}
          port=${ports[$index]}
          ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_UBUNTU }} "sudo docker run -d --name $service-plataform-do -p $port:$port ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest"
        done

  deploy-CentOS:
    needs: [build-and-push] 
    runs-on: ubuntu-latest

    steps:
    - name: Set permissions for private key
      run: |
        echo "${{ secrets.DIGITALOCEAN_SSH_KEY }}" > key
        chmod 600 key
        
    - name: Deploy to CentOS Droplet
      run: |
        ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_CENTOS }} << 'EOF'
          yum update -y
          yum install -y yum-utils
          yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
          yum install -y docker-ce docker-ce-cli containerd.io
          systemctl start docker
          systemctl enable docker
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          docker network create web || true
        EOF

    - name: Pull Docker images on CentOS
      run: |
        services=(
          "frontend" "create-user" "delete-user" "update-user" "read-user" "createproject" "deleteproject" 
          "updateproject" "readproject" "createcommentary" "deletecommentary" 
          "updatecommentary" "readcommentaries" "createdocument" "deletedocument" 
          "updatedocument" "login" "chat-service" "projectsubscriptionservice"
          "user-role-service" "createtask-service" "readtask-service"
        )

        for service in "${services[@]}"
        do
          ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_CENTOS }} "sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest"
        done

    - name: Stop running containers on CentOS
      run: |
        services=(
          "frontend" "create-user" "delete-user" "update-user" "read-user" "createproject" "deleteproject" 
          "updateproject" "readproject" "createcommentary" "deletecommentary" 
          "updatecommentary" "readcommentaries" "createdocument" "deletedocument" 
          "updatedocument" "login" "chat-service" "projectsubscriptionservice"
          "user-role-service" "createtask-service" "readtask-service"
        )

        for service in "${services[@]}"
        do
          ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_CENTOS }} "sudo docker stop $service-plataform-do || true"
          ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_CENTOS }} "sudo docker rm $service-plataform-do || true"
        done

    - name: Remove old Docker images on CentOS
      run: |
        ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_CENTOS }} 'sudo docker image prune -f'

    - name: Run new containers on CentOS
      run: |
        services=(
          "frontend" "create-user" "delete-user" "update-user" "read-user" "createproject" "deleteproject" 
          "updateproject" "readproject" "createcommentary" "deletecommentary" 
          "updatecommentary" "readcommentaries" "createdocument" "deletedocument" 
          "updatedocument" "login" "chat-service" "projectsubscriptionservice"
          "user-role-service" "createtask-service" "readtask-service"
        )
        
        ports=(3000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 4014 4015 5000 8080 4021 4023 4024 4025)

        for index in ${!services[@]}
        do
          service=${services[$index]}
          port=${ports[$index]}
          ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_CENTOS }} "sudo docker run -d --name $service-plataform-do -p $port:$port ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest"
        done

  deploy-Debian:
    needs: [build-and-push]
    runs-on: ubuntu-latest

    steps:
    - name: Set permissions for private key
      run: |
        echo "${{ secrets.DIGITALOCEAN_SSH_KEY }}" > key
        chmod 600 key

    - name: Deploy to Debian Droplet
      run: |
        ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_DEBIAN }} << 'EOF'
          apt-get update -y
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
          add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
          apt-get update -y
          apt-get install -y docker-ce docker-ce-cli containerd.io
          systemctl start docker
          systemctl enable docker
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          docker network create web || true
        EOF

    - name: Pull Docker images on Debian
      run: |
        services=(
          "frontend" "create-user" "delete-user" "update-user" "read-user" "createproject" "deleteproject" 
          "updateproject" "readproject" "createcommentary" "deletecommentary" 
          "updatecommentary" "readcommentaries" "createdocument" "deletedocument" 
          "updatedocument" "login" "chat-service" "projectsubscriptionservice"
          "user-role-service" "createtask-service" "readtask-service"
        )

        for service in "${services[@]}"
        do
          ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_DEBIAN }} "sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest"
        done

    - name: Stop running containers on Debian
      run: |
        services=(
          "frontend" "create-user" "delete-user" "update-user" "read-user" "createproject" "deleteproject" 
          "updateproject" "readproject" "createcommentary" "deletecommentary" 
          "updatecommentary" "readcommentaries" "createdocument" "deletedocument" 
          "updatedocument" "login" "chat-service" "projectsubscriptionservice"
          "user-role-service" "createtask-service" "readtask-service"
        )

        for service in "${services[@]}"
        do
          ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_DEBIAN }} "sudo docker stop $service-plataform-do || true"
          ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_DEBIAN }} "sudo docker rm $service-plataform-do || true"
        done

    - name: Remove old Docker images on Debian
      run: |
        ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_DEBIAN }} 'sudo docker image prune -f'

    - name: Run new containers on Debian
      run: |
        services=(
          "frontend" "create-user" "delete-user" "update-user" "read-user" "createproject" "deleteproject" 
          "updateproject" "readproject" "createcommentary" "deletecommentary" 
          "updatecommentary" "readcommentaries" "createdocument" "deletedocument" 
          "updatedocument" "login" "chat-service" "projectsubscriptionservice"
          "user-role-service" "createtask-service" "readtask-service"
        )
        
        ports=(3000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 4014 4015 5000 8080 4021 4023 4024 4025)

        for index in ${!services[@]}
        do
          service=${services[$index]}
          port=${ports[$index]}
          ssh -o StrictHostKeyChecking=no -i key root@${{ secrets.DROPLET_IP_DEBIAN }} "sudo docker run -d --name $service-plataform-do -p $port:$port ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest"
        done
